<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Add steps to tracking" xml:space="preserve">
    <value>Add steps to tracking</value>
  </data>
  <data name="Additional expense" xml:space="preserve">
    <value>Additional expense</value>
  </data>
  <data name="Change Language" xml:space="preserve">
    <value>Change Language</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="Cost Incurred (before becoming faulty) " xml:space="preserve">
    <value>Cost Incurred (before becoming faulty) </value>
  </data>
  <data name="cost of raw material loss" xml:space="preserve">
    <value>cost of raw material loss</value>
  </data>
  <data name="Damaged Product Quantity " xml:space="preserve">
    <value>Damaged Product Quantity </value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Financial Reports" xml:space="preserve">
    <value>Financial Reports</value>
  </data>
  <data name="Finish Form " xml:space="preserve">
    <value>Finish Form </value>
  </data>
  <data name="finish upload" xml:space="preserve">
    <value>finish upload</value>
  </data>
  <data name="Follow up" xml:space="preserve">
    <value>Follow up</value>
  </data>
  <data name="Follow-up " xml:space="preserve">
    <value>Follow-up </value>
  </data>
  <data name="Geographical Location " xml:space="preserve">
    <value>Geographical Location </value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Input problem" xml:space="preserve">
    <value>Input problem</value>
  </data>
  <data name="Labor cost" xml:space="preserve">
    <value>Labor cost</value>
  </data>
  <data name="Log Out" xml:space="preserve">
    <value>Log Out</value>
  </data>
  <data name="Modify" xml:space="preserve">
    <value>Modify</value>
  </data>
  <data name="Modify Product" xml:space="preserve">
    <value>Modify Product</value>
  </data>
  <data name="Product code" xml:space="preserve">
    <value>Product code</value>
  </data>
  <data name="Product Code " xml:space="preserve">
    <value>Product Code </value>
  </data>
  <data name="product condition" xml:space="preserve">
    <value>product condition</value>
  </data>
  <data name="Product Cost " xml:space="preserve">
    <value>Product Cost </value>
  </data>
  <data name="Product information" xml:space="preserve">
    <value>Product information</value>
  </data>
  <data name="Product Information " xml:space="preserve">
    <value>Product Information </value>
  </data>
  <data name="Product name" xml:space="preserve">
    <value>Product name</value>
  </data>
  <data name="Product Name " xml:space="preserve">
    <value>Product Name </value>
  </data>
  <data name="Product Status " xml:space="preserve">
    <value>Product Status </value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Report" xml:space="preserve">
    <value>Report</value>
  </data>
  <data name="Reported Issue " xml:space="preserve">
    <value>Reported Issue </value>
  </data>
  <data name="Reports by Geographic Location" xml:space="preserve">
    <value>Reports by Geographic Location</value>
  </data>
  <data name="Reports by Manager" xml:space="preserve">
    <value>Reports by Manager</value>
  </data>
  <data name="Responsible person" xml:space="preserve">
    <value>Responsible person</value>
  </data>
  <data name="Responsible Person " xml:space="preserve">
    <value>Responsible Person </value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Shelf" xml:space="preserve">
    <value>Shelf</value>
  </data>
  <data name="Shelf level" xml:space="preserve">
    <value>Shelf level</value>
  </data>
  <data name="Steps of Follow-up" xml:space="preserve">
    <value>Steps of Follow-up</value>
  </data>
  <data name="Storage bin" xml:space="preserve">
    <value>Storage bin</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
</root>